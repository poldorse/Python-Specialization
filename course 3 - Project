with open("this_page_cache.txt", 'w') as outfile: 
    outfile.write('')
import requests_with_caching
import json

# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
def get_movie_data(str1):
    baseurl = 'http://www.omdbapi.com/'
    parameters = {}
    parameters['t'] = str1
    parameters['r'] = 'json'
    parameters['apikey'] = "143d5ddd"
    resp = requests_with_caching.get(baseurl, params = parameters, permanent_cache_file="permanent_cache.txt")
    print(resp.url)
    return resp.json()

def get_movie_rating(resp):
    for elem in resp['Ratings']:
        if elem['Source'] == 'Rotten Tomatoes':
            return int(elem['Value'].strip('%'))
    return 0
    
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
def get_movies_from_tastedive(str1):
    baseurl = 'https://tastedive.com/api/similar'
    parameters = {}
    parameters['q'] = str1
    #parameters['k'] = '333222-poldorse-T4PNBQDU'
    parameters['type'] = 'movies'
    parameters['limit'] = '5'
    resp = requests_with_caching.get(baseurl, params = parameters, permanent_cache_file="permanent_cache.txt")
    return resp.json()

def extract_movie_titles(resp):
    return [x['Name'] for x in resp['Similar']['Results']]

def get_related_titles(lst):
    listaux = []
    returnlst = []
    for elem in lst:
        print(elem)
        listaux = extract_movie_titles(get_movies_from_tastedive(elem))
        for el in listaux:
            if el not in returnlst:
                returnlst.append(el)
    return returnlst

def get_sorted_recommendations(lst):
    lst_nsorted= get_related_titles(lst)
    lst_sorted = sorted(lst_nsorted, key = lambda ele: (get_movie_rating(get_movie_data(ele)),ele), reverse = True)
    return(lst_sorted)

get_sorted_recommendations(["Bridesmaids", "Sherlock Holmes"])
